@page "/"
@inject ZapLink.Services.LinkService LinkService
@using ZapLink.Models
@using ZapLink.Shared

<h1>My Links</h1>

<AddLinkForm OnAdd="AddLink" />

@if (isLoading)
{
    <p>Loading links...</p>
}
else if (editingLink is not null)
{
    <EditForm Model="editingLink" OnValidSubmit="UpdateLink">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="editingLink.Title" />
        </div>

        <div class="mb-2">
            <label>URL</label>
            <InputText class="form-control" @bind-Value="editingLink.Url" />
        </div>

        <div class="mb-2">
            <label>Tags (comma separated)</label>
            <InputText class="form-control" @bind-Value="tagsRaw" />
        </div>

        <button class="btn btn-success" type="submit">Save</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}
else if (links.Count == 0)
{
    <p>No links yet</p>
}
else
{
    @foreach (var link in links)
    {
        <LinkCard Link="link" OnDelete="DeleteLink" OnEdit="StartEdit" />
    }
}

@code {
    private List<LinkItem> links = new();
    private LinkItem? editingLink;
    private string tagsRaw = "";
    private bool isLoading = true;
    private string userId = "githubUser123"; // Replace with dynamic user from GitHub login later

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        links = await LinkService.GetLinksByUser(userId);
        isLoading = false;
    }

    private async Task AddLink(LinkItem newLink)
    {
        newLink.UserId = userId;
        await LinkService.AddLink(newLink);
        links = await LinkService.GetLinksByUser(userId);
    }

    private async Task DeleteLink(LinkItem toDelete)
    {
        await LinkService.DeleteLink(toDelete.Id, toDelete.UserId);
        links = await LinkService.GetLinksByUser(userId);
    }

    private void StartEdit(LinkItem link)
    {
        editingLink = new LinkItem
        {
            Id = link.Id,
            UserId = link.UserId,
            Title = link.Title,
            Url = link.Url,
            Tags = new List<string>(link.Tags)
        };
        tagsRaw = string.Join(", ", editingLink.Tags);
    }

    private void CancelEdit()
    {
        editingLink = null;
        tagsRaw = "";
    }

    private async Task UpdateLink()
    {
        if (editingLink is null) return;

        editingLink.Tags = tagsRaw
            .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .ToList();

        await LinkService.UpdateLink(editingLink);
        links = await LinkService.GetLinksByUser(userId);

        editingLink = null;
        tagsRaw = "";
    }
}
